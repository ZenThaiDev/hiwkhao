use std::fs;
use std::io::{self, BufRead};
use std::path::Path;

fn main() {
    let lex_file = "hiwkhao.lex";
    let output_file = "./scanner/src/grammar.rs";

    let lines = read_lines(lex_file).expect("Failed to read the .lex file");

    let mut rust_code = String::from(
        r#"// This file is auto-generated by the preprocessor
// The preprocessor reads the .lex file and generates the Rust code for logos
// To regenerate this file, run the preprocessor with the following command:
// cargo run -p preprocessor
        
use logos::Logos;
#[derive(Logos, Debug, PartialEq)]
pub enum Token {
        "#,
    );

    for line in lines {
        if let Ok(entry) = line {
            let parts: Vec<&str> = entry.splitn(2, ' ').collect();
            if parts.len() == 2 {
                let token_type = parts[0];
                let regex = parts[1].trim();

                if token_type == "WHITESPACE" {
                    rust_code.push_str(&format!(
                        r#"    #[regex(r"{regex}", logos::skip)]
        {token_type},
        "#,
                        regex = regex
                    ));
                } else {
                    rust_code.push_str(&format!(
                        r#"    #[regex(r"{regex}")]
        {token_type},
        "#,
                        regex = regex,
                        token_type = token_type
                    ));
                }
            }
        }
    }

    rust_code.push_str("    ERR,\n");

    rust_code.push_str("}\n");

    fs::write(output_file, rust_code).expect("Failed to write the generated Rust file");

    println!("Logos-compatible Rust code generated in: {}", output_file);
}

fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<fs::File>>>
where
    P: AsRef<Path>,
{
    let file = fs::File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
